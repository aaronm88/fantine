#!/bin/bash

# Fantine Credentials Setup Script
# This script helps you set up all required credentials and environment variables

set -e

echo "üîê Fantine Credentials Setup"
echo "=============================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to prompt for input
prompt_input() {
    local prompt="$1"
    local var_name="$2"
    local is_secret="${3:-false}"
    
    if [ "$is_secret" = true ]; then
        echo -n -e "${BLUE}$prompt${NC}: "
        read -s value
        echo ""
    else
        echo -n -e "${BLUE}$prompt${NC}: "
        read value
    fi
    
    eval "$var_name='$value'"
}

# Function to validate email
validate_email() {
    local email="$1"
    if [[ $email =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to validate URL
validate_url() {
    local url="$1"
    if [[ $url =~ ^https?:// ]]; then
        return 0
    else
        return 1
    fi
}

echo -e "${YELLOW}This script will help you set up all required credentials for Fantine.${NC}"
echo -e "${YELLOW}Make sure you have the following ready:${NC}"
echo "  ‚Ä¢ DigitalOcean API token"
echo "  ‚Ä¢ DigitalOcean Spaces credentials"
echo "  ‚Ä¢ SSH key uploaded to DigitalOcean"
echo "  ‚Ä¢ GitHub Personal Access Token"
echo "  ‚Ä¢ Email address for alerts"
echo ""

read -p "Press Enter to continue or Ctrl+C to exit..."

# Create .env file
echo ""
echo -e "${GREEN}Creating .env file...${NC}"

if [ -f .env ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  .env file already exists.${NC}"
    read -p "Do you want to overwrite it? (y/N): " overwrite
    if [[ ! $overwrite =~ ^[Yy]$ ]]; then
        echo "Exiting without changes."
        exit 0
    fi
fi

cat > .env << 'EOF'
# =============================================================================
# FANTINE ENVIRONMENT CONFIGURATION
# =============================================================================
# Generated by setup-credentials.sh on $(date)
# DO NOT commit this file to version control!

EOF

# DigitalOcean API Token
echo ""
echo -e "${GREEN}üì° DigitalOcean API Token${NC}"
echo "Get this from: https://cloud.digitalocean.com/account/api/tokens"
prompt_input "DigitalOcean API Token" DIGITALOCEAN_TOKEN true

# DigitalOcean Spaces
echo ""
echo -e "${GREEN}üóÑÔ∏è  DigitalOcean Spaces Configuration${NC}"
echo "Get these from: https://cloud.digitalocean.com/account/api/spaces"
prompt_input "Spaces Access Key" DO_SPACES_ACCESS_KEY true
prompt_input "Spaces Secret Key" DO_SPACES_SECRET_KEY true
prompt_input "Spaces Bucket Name" DO_SPACES_BUCKET
prompt_input "Spaces Endpoint (e.g., https://nyc3.digitaloceanspaces.com)" DO_SPACES_ENDPOINT

# SSH Key
echo ""
echo -e "${GREEN}üîë SSH Key Configuration${NC}"
echo "Upload your SSH key at: https://cloud.digitalocean.com/account/security"
prompt_input "SSH Key Name in DigitalOcean" DO_SSH_KEY_NAME

# GitHub
echo ""
echo -e "${GREEN}üêô GitHub Configuration${NC}"
echo "Get token from: https://github.com/settings/tokens"
prompt_input "GitHub Personal Access Token" GH_TOKEN true

# Get GitHub username and repo name
echo ""
echo -e "${BLUE}GitHub Repository URL${NC}"
echo "Format: https://github.com/username/repository-name"
prompt_input "GitHub Repository URL" REPO_URL

# Validate GitHub URL
if ! validate_url "$REPO_URL"; then
    echo -e "${RED}‚ùå Invalid GitHub repository URL format${NC}"
    exit 1
fi

# Alert Email
echo ""
echo -e "${GREEN}üìß Monitoring & Alerts${NC}"
prompt_input "Email address for alerts" ALERT_EMAIL

# Validate email
if ! validate_email "$ALERT_EMAIL"; then
    echo -e "${RED}‚ùå Invalid email address format${NC}"
    exit 1
fi

# Optional scraping configuration
echo ""
echo -e "${GREEN}üï∑Ô∏è  Scraping Configuration (Optional)${NC}"
prompt_input "Target URLs (comma-separated, or press Enter to skip)" SCRAPING_TARGET_URLS
prompt_input "Output format (json/txt, default: json)" SCRAPING_OUTPUT_FORMAT
prompt_input "Max pages (default: 100)" SCRAPING_MAX_PAGES
prompt_input "Delay between requests in seconds (default: 1.0)" SCRAPING_DELAY_SECONDS

# Set defaults for empty values
SCRAPING_OUTPUT_FORMAT=${SCRAPING_OUTPUT_FORMAT:-json}
SCRAPING_MAX_PAGES=${SCRAPING_MAX_PAGES:-100}
SCRAPING_DELAY_SECONDS=${SCRAPING_DELAY_SECONDS:-1.0}

# Write to .env file
cat >> .env << EOF

# =============================================================================
# DIGITALOCEAN CREDENTIALS
# =============================================================================
DIGITALOCEAN_TOKEN=$DIGITALOCEAN_TOKEN

# =============================================================================
# DIGITALOCEAN SPACES (for Terraform state storage)
# =============================================================================
DO_SPACES_ACCESS_KEY=$DO_SPACES_ACCESS_KEY
DO_SPACES_SECRET_KEY=$DO_SPACES_SECRET_KEY
DO_SPACES_BUCKET=$DO_SPACES_BUCKET
DO_SPACES_ENDPOINT=$DO_SPACES_ENDPOINT

# =============================================================================
# SSH CONFIGURATION
# =============================================================================
DO_SSH_KEY_NAME=$DO_SSH_KEY_NAME

# =============================================================================
# GITHUB CONFIGURATION
# =============================================================================
GH_TOKEN=$GH_TOKEN
REPO_URL=$REPO_URL

# =============================================================================
# MONITORING & ALERTS
# =============================================================================
ALERT_EMAIL=$ALERT_EMAIL

# =============================================================================
# SCRAPING CONFIGURATION
# =============================================================================
SCRAPING_TARGET_URLS=$SCRAPING_TARGET_URLS
SCRAPING_OUTPUT_FORMAT=$SCRAPING_OUTPUT_FORMAT
SCRAPING_MAX_PAGES=$SCRAPING_MAX_PAGES
SCRAPING_DELAY_SECONDS=$SCRAPING_DELAY_SECONDS
SCRAPING_TIMEOUT_SECONDS=30
SCRAPING_MAX_CONCURRENT=5

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================
DEV_MODE=false
LOG_LEVEL=INFO
EOF

echo ""
echo -e "${GREEN}‚úÖ .env file created successfully!${NC}"

# Test DigitalOcean connection
echo ""
echo -e "${GREEN}üß™ Testing DigitalOcean connection...${NC}"

# Check if doctl is installed
if ! command -v doctl &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  doctl is not installed. Install it to test the connection:${NC}"
    echo "  macOS: brew install doctl"
    echo "  Linux: https://docs.digitalocean.com/reference/doctl/how-to/install/"
else
    # Test connection
    if doctl auth init --access-token "$DIGITALOCEAN_TOKEN" > /dev/null 2>&1; then
        if doctl account get > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ DigitalOcean connection successful!${NC}"
        else
            echo -e "${RED}‚ùå DigitalOcean connection failed${NC}"
        fi
    else
        echo -e "${RED}‚ùå Failed to authenticate with DigitalOcean${NC}"
    fi
fi

# Test GitHub connection
echo ""
echo -e "${GREEN}üß™ Testing GitHub connection...${NC}"

# Check if gh is installed
if ! command -v gh &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  GitHub CLI is not installed. Install it to test the connection:${NC}"
    echo "  macOS: brew install gh"
    echo "  Linux: https://cli.github.com/"
else
    # Test connection
    if gh auth login --with-token < <(echo "$GH_TOKEN") > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ GitHub connection successful!${NC}"
    else
        echo -e "${RED}‚ùå GitHub connection failed${NC}"
    fi
fi

# Next steps
echo ""
echo -e "${GREEN}üéâ Setup Complete!${NC}"
echo ""
echo -e "${BLUE}Next steps:${NC}"
echo "1. Review your .env file:"
echo "   cat .env"
echo ""
echo "2. Set up GitHub Secrets (required for GitHub Actions):"
echo "   Go to: https://github.com/$(echo $GITHUB_REPO_URL | sed 's|https://github.com/||')/settings/secrets/actions"
echo "   Add these secrets:"
echo "   ‚Ä¢ DIGITALOCEAN_TOKEN"
echo "   ‚Ä¢ DO_SPACES_ACCESS_KEY"
echo "   ‚Ä¢ DO_SPACES_SECRET_KEY"
echo "   ‚Ä¢ DO_SPACES_BUCKET"
echo "   ‚Ä¢ DO_SPACES_ENDPOINT"
echo "   ‚Ä¢ DO_SSH_KEY_NAME"
echo "   ‚Ä¢ GH_TOKEN"
echo "   ‚Ä¢ ALERT_EMAIL"
echo ""
echo "3. Initialize Terraform:"
echo "   cd terraform && terraform init"
echo ""
echo "4. Deploy your scraper:"
echo "   ./scripts/deploy.sh dev 24 \"https://example.com\""
echo ""
echo -e "${YELLOW}üìö For detailed instructions, see: docs/CREDENTIALS_SETUP.md${NC}"
